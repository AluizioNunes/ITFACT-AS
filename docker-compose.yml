services:
  # Frontend Service
  AS-FRONTEND:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: AS-FRONTEND
    environment:
      - VITE_API_BASE=/api
      - VITE_CATALOG_BASE=/catalog
    ports:
      - "${WEB_PORT:-8080}:80"
    depends_on:
      - AS-NESTJS
      - AS-FASTAPI
    networks: [itfact]
    restart: unless-stopped

  # Backend Services
  AS-NESTJS:
    build:
      context: ./Backend/NestJS
      dockerfile: Dockerfile
    container_name: AS-NESTJS
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://${POSTGRES_USER:-itfact}:${POSTGRES_PASSWORD:-itfactpwd}@AS-POSTGRESQL:5432/${POSTGRES_DB:-itfact}
      - REDIS_HOST=${REDIS_HOST:-AS-REDIS}
      - REDIS_PORT=${REDIS_PORT:-6379}
      - RABBITMQ_URL=amqp://${RABBITMQ_USER:-itfact}:${RABBITMQ_PASS:-itfactpwd}@AS-RABBITMQ:5672
      - MONGO_URI=${MONGO_URI:-mongodb://AS-MONGODB:27017/itfact}
      - MINIO_ENDPOINT=${MINIO_ENDPOINT:-AS-MINIO:9000}
    ports:
      - "3000:3000"
    depends_on:
      - AS-POSTGRESQL
      - AS-REDIS
      - AS-RABBITMQ
      - AS-MONGODB
      - AS-MINIO
    networks: [itfact]
    restart: unless-stopped

  AS-FASTAPI:
    build:
      context: ./Backend/FastAPI
      dockerfile: Dockerfile
    container_name: AS-FASTAPI
    environment:
      - MONGO_URI=${MONGO_URI:-mongodb://AS-MONGODB:27017/itfact}
      - REDIS_HOST=${REDIS_HOST:-AS-REDIS}
      - REDIS_PORT=${REDIS_PORT:-6379}
      - RABBITMQ_URL=amqp://${RABBITMQ_USER:-itfact}:${RABBITMQ_PASS:-itfactpwd}@AS-RABBITMQ:5672
    ports:
      - "8000:8000"
    depends_on:
      - AS-MONGODB
      - AS-REDIS
      - AS-RABBITMQ
    networks: [itfact]
    restart: unless-stopped

  # Database Services
  AS-POSTGRESQL:
    image: postgres:17.6
    container_name: AS-POSTGRESQL
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-itfact}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-itfactpwd}
      - POSTGRES_DB=${POSTGRES_DB:-itfact}
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./init/postgres:/docker-entrypoint-initdb.d
    networks: [itfact]
    restart: unless-stopped

  AS-MONGODB:
    image: mongo:latest
    container_name: AS-MONGODB
    ports:
      - "27017:27017"
    volumes:
      - mongodata:/data/db
    networks: [itfact]
    restart: unless-stopped

  # Cache and Messaging
  AS-REDIS:
    image: redis:latest
    container_name: AS-REDIS
    ports:
      - "6379:6379"
    networks: [itfact]
    restart: unless-stopped

  AS-RABBITMQ:
    image: rabbitmq:3-management
    container_name: AS-RABBITMQ
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER:-itfact}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASS:-itfactpwd}
    ports:
      - "5672:5672"
      - "15672:15672"
    networks: [itfact]
    restart: unless-stopped

  # Storage
  AS-MINIO:
    image: minio/minio:latest
    container_name: AS-MINIO
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER:-itfact}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD:-itfactpwd}
    command: server /data --console-address ":9001"
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - miniodata:/data
    networks: [itfact]
    restart: unless-stopped

  # Observability
  AS-LOKI:
    image: grafana/loki:latest
    container_name: AS-LOKI
    command: -config.file=/etc/loki/local-config.yaml
    ports:
      - "3100:3100"
    networks: [itfact]
    restart: unless-stopped

  AS-PROMTAIL:
    image: grafana/promtail:latest
    container_name: AS-PROMTAIL
    volumes:
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock
      - ./observability/promtail-config.yml:/etc/promtail/config.yml
    command: -config.file=/etc/promtail/config.yml
    depends_on: [AS-LOKI]
    networks: [itfact]
    restart: unless-stopped

  AS-GRAFANA:
    image: grafana/grafana:latest
    container_name: AS-GRAFANA
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASS:-admin}
    ports:
      - "3001:3000"
    depends_on: [AS-LOKI]
    networks: [itfact]
    restart: unless-stopped

  # Automation
  AS-N8N:
    image: n8nio/n8n:latest
    container_name: AS-N8N
    environment:
      - N8N_HOST=n8n
      - N8N_PORT=5678
      - N8N_PROTOCOL=http
    ports:
      - "5678:5678"
    volumes:
      - n8ndata:/home/node/.n8n
    networks: [itfact]
    restart: unless-stopped

  # Reverse Proxy
  AS-NGINX:
    image: nginx:alpine
    container_name: AS-NGINX
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - AS-FRONTEND
      - AS-NESTJS
      - AS-FASTAPI
    networks: [itfact]
    restart: unless-stopped

  # Monitoring
  AS-PROMETHEUS:
    image: prom/prometheus:latest
    container_name: AS-PROMETHEUS
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    networks: [itfact]
    restart: unless-stopped

networks:
  itfact:
    driver: bridge

volumes:
  pgdata:
  mongodata:
  miniodata:
  n8ndata:
